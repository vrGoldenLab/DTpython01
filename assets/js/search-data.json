{
  
    
        "post0": {
            "title": "조건문",
            "content": ". if &#51312;&#44148;&#47928; . 특정 조건일 때 코드를 실행하는 문법합니다. | 다양한 상황에 대처할 때 사용합니다. | . # if if 조건: 작업1 . if . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다&#39;) print(&#39;a는 음수&#39;) print(&#39;끝&#39;) . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다&#39;) print(&#39;a는 음수&#39;) print(&#39;끝&#39;) . temp = float(input(&#39;체온:&#39;)) if temp &gt; 37.5 : print(&#39;등교불가&#39;) . a = 5 b = 4 if a % b == 0: print(f&#39;{a}는 {b}로 나누어 떨어집니다&#39;) else: print(f&#39;{a}는 {b}로 나머지가 {a % b} 입니다&#39;) . if..else . # if ..else if 조건: 작업1 else: 작업2 . temp = float(input(&#39;체온:&#39;)) if temp &gt; 37.5 : print(&#39;등교불가&#39;) else: print(&#39;등교&#39;) . if.. elif . # if elif if 조건: 작업1 elif 조건: 작업2 elif 조건: 작업3 else: 작업4 . &#50696;&#51228; . &#50696;&#51228;1 . temp = int(input(&#39;체온:&#39;)) chk1 = input(&#39;코로나 검사를 받고 결과를 기다리고 있나요?(y/n):&#39;) chk2 = input(&#39;자가격리중인가요?(y/n):&#39;) if temp &gt; 37.5: print(&#39;발열기준 초과: 등교불가&#39;) elif chk1 == &#39;y&#39; or &#39;Y&#39;: print(&#39;검사대기중 등교불가&#39;) elif chk2 == &#39;y&#39; or &#39;Y&#39;: print(&#39;자가격리중 등교불가&#39;) else: print(&#39;등교가능&#39;) . &#50696;&#51228;2 . grade = &#39; &#39; score = int(input(&#39;점수를 입력하세요&#39;)) if score &gt;= 90: grade = &#39;A&#39; elif score &gt;= 80: grade = &#39;B&#39; elif score &gt;= 70: grade = &#39;C&#39; elif score &gt;= 60: grade = &#39;D&#39; else: grade = &#39;F&#39; print(f&#39;등급: {grade}&#39;) . &#50696;&#51228;3 . #현재셀에서 바꾸기 shift + ctrl + h buy = 0 buy = int(input(&#39;물건 구매가를 입력하세요:&#39;)) if buy &gt;= 100000: dc = 10 elif buy &gt;= 50000: dc = 7.5 elif buy &gt;= 10000: dc = 5 else : dc = 0 print(f&#39;구매가:{buy}원&#39;) print(f&#39;할인율:{dc}%&#39;) print(f&#39;할인금액:{int(buy*dc/100)}원&#39;) print(f&#39;지불금액:{int(buy-(buy*dc/100))}원&#39;) . &#50696;&#51228;4 . n1 = int(input(&#39;숫자 1:&#39;)) n2 = int(input(&#39;숫자 2:&#39;)) n3 = int(input(&#39;숫자 3:&#39;)) min1= n1 # 첫번째 수 저장 if n2 &lt; min1: # 두번째와 비교 min1 = n2 # 두번째수가 작으면 min1 저장 if n3 &lt; min1: # 세번째 수 비교 min1 = n3 # 세번째 수가 작으면 min1 저장 print(&#39;가장 작은 수:&#39;, min1) . n1 = int(input(&#39;숫자 1:&#39;)) n2 = int(input(&#39;숫자 2:&#39;)) n3 = int(input(&#39;숫자 3:&#39;)) # 모든 값을 비교해야 합니다. if else,if elif를 사용하면 다른 값이 선택됩니다 (3,2,1 입력 후 테스트) min1 = n1 if n2 &lt; min1: # 두번째 수가 작으면 이후 비교 불가 min = n2 elif n3 &lt; min1: min1 = n3 print(&#39;가장 작은 수:&#39;, min1) . n1 = int(input(&#39;숫자 1:&#39;)) n2 = int(input(&#39;숫자 2:&#39;)) n3 = int(input(&#39;숫자 3:&#39;)) print(f&#39;가장 작은 수:{min(n1,n2,n3)}&#39;) . &#45436;&#47532;&#50672;&#49328;&#51088; . and : 논리곱 or : 논리합 not : 논리부정 . 논리 값을 판단해주는 연산자 입니다. . # and, or, not print(True and True) print(True and False) print(False and True) print(False and False) print() print(True or True) print(True or False) print(False or True) print(False or False) print() print(not True) print(not False) . &#50696;&#51228; . &#50696;&#51228;1 . age = int(input(&#39;나이를 입력하세요:&#39;)) price = 3000 if age &gt; 64 or &lt;= 7: price = 0 elif age &gt;= 8 and &lt;= 18: price =1000 print(f&#39;{price}원 입니다&#39;) . age = int(input(&#39;나이를 입력하세요:&#39;)) price = &#39;3000원&#39; if age &gt; 64 or age &lt;= 7: price = &#39;무료&#39; elif age &gt;= 8 and age &lt;= 18: price = &#39;1000원&#39; print(f&#39;{price} 입니다&#39;) . &#50696;&#51228;2 . user_id = &#39;ID1234&#39; user_pwd = &#39;PWD1234&#39; # 아이디 패스워드 입력 input_id = input(&#39;아이디:&#39;) input_pwd = input(&#39;패스워드:&#39;) #로그인 처리 if user_id == input_id and user_pwd == input_pwd: print(&#39;로그인 성공&#39;) else: print(&#39;로그인 실패&#39;) . &#50696;&#51228;3 . num1 = int(input(&#39;숫자1: &#39;)) num2 = int(input(&#39;숫자2: &#39;)) operator = input(&#39;연산기호(+,-,*,/) : &#39;) result= 0 # 처리 if operator == &#39;+&#39;: result = num1 + num2 elif operator == &#39;-&#39;: result = num1 - num2 elif operator == &#39;*&#39;: result = num1 * num2 elif operator == &#39;/&#39;: result = num1 / num2 # 출력 print(&#39;-&#39;*30) print(f&#39;{num1} {operator} {num2} = {result}&#39;) . num1 = int(input(&#39;숫자1: &#39;)) num2 = int(input(&#39;숫자2: &#39;)) operator = input(&#39;연산기호(+,-,*,/) : &#39;) result= 0 # 처리 if operator == &#39;+&#39;: result = num1 + num2 elif operator == &#39;-&#39;: result = num1 - num2 elif operator == &#39;*&#39;: result = num1 * num2 elif operator == &#39;/&#39;: if num2 != 0: result = num1 / num2 else: result = None # 출력 print(&#39;-&#39;*30) print(f&#39;{num1} {operator} {num2} = {result}&#39;) . num1 = int(input(&#39;숫자1: &#39;)) num2 = int(input(&#39;숫자2: &#39;)) operator = input(&#39;연산기호(+,-,*,/) : &#39;) result= 0 # 처리 if operator == &#39;+&#39;: result = num1 + num2 elif operator == &#39;-&#39;: result = num1 - num2 elif operator == &#39;*&#39;: result = num1 * num2 elif operator == &#39;/&#39;: if num2 != 0: result = num1 / num2 # 출력 print(&#39;-&#39;*30) if operator == &#39;/&#39; and num2 == 0: print(&#39;0으로 나눌 수 없습니다&#39;) else: print(f&#39;{num1} {operator} {num2} = {result}&#39;) . for i in range(3): num1 = int(input(&#39;숫자1: &#39;)) num2 = int(input(&#39;숫자2: &#39;)) operator = input(&#39;연산기호(+,-,*,/) : &#39;) result= 0 # 처리 if operator == &#39;+&#39;: result = num1 + num2 elif operator == &#39;-&#39;: result = num1 - num2 elif operator == &#39;*&#39;: result = num1 * num2 elif operator == &#39;/&#39;: if num2 != 0: result = num1 / num2 # 출력 print(&#39;-&#39;*30) if operator == &#39;/&#39; and num2 == 0: print(&#39;0으로 나눌 수 없습니다&#39;) else: print(f&#39;{num1} {operator} {num2} = {result}&#39;) . &#50696;&#51228; 4 . import random random.randint(1,6) . import random num1 = random.randint(1,6) print(&#39;주사위1:&#39;,num1) num2 = random.randint(1,6) print(&#39;주사위2:&#39;,num2) if num1 &gt; num2: print(&#39;주사위1이 이겼습니다&#39;) elif num1 &lt; num2: print(&#39;주사위2이 이겼습니다&#39;) else: print(&#39;비겼습니다&#39;) .",
            "url": "https://vrgoldenlab.github.io/DTpython01/2021/06/03/_05_31_day5_if1.html",
            "relUrl": "/2021/06/03/_05_31_day5_if1.html",
            "date": " • Jun 3, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "조건문",
            "content": ". if &#51312;&#44148;&#47928; . 특정 조건일 때 코드를 실행하는 문법합니다. | 다양한 상황에 대처할 때 사용합니다. # if if 조건: 작업1 . | . . if . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다&#39;) print(&#39;a는 음수&#39;) print(&#39;끝&#39;) . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다&#39;) print(&#39;a는 음수&#39;) print(&#39;끝&#39;) . temp = float(input(&#39;체온:&#39;)) if temp &gt; 37.5 : print(&#39;등교불가&#39;) . a = 5 b = 4 if a % b == 0: print(f&#39;{a}는 {b}로 나누어 떨어집니다&#39;) else: print(f&#39;{a}는 {b}로 나머지가 {a % b} 입니다&#39;) . if..else . # if ..else if 조건: 작업1 else: 작업2 . temp = float(input(&#39;체온:&#39;)) if temp &gt; 37.5 : print(&#39;등교불가&#39;) else: print(&#39;등교&#39;) . if.. elif . # if elif if 조건: 작업1 elif 조건: 작업2 elif 조건: 작업3 else: 작업4 . &#50696;&#51228; . &#50696;&#51228;1 . temp = int(input(&#39;체온:&#39;)) chk1 = input(&#39;코로나 검사를 받고 결과를 기다리고 있나요?(y/n):&#39;) chk2 = input(&#39;자가격리중인가요?(y/n):&#39;) if temp &gt; 37.5: print(&#39;발열기준 초과: 등교불가&#39;) elif chk1 == &#39;y&#39; or &#39;Y&#39;: print(&#39;검사대기중 등교불가&#39;) elif chk2 == &#39;y&#39; or &#39;Y&#39;: print(&#39;자가격리중 등교불가&#39;) else: print(&#39;등교가능&#39;) . &#50696;&#51228;2 . grade = &#39; &#39; score = int(input(&#39;점수를 입력하세요&#39;)) if score &gt;= 90: grade = &#39;A&#39; elif score &gt;= 80: grade = &#39;B&#39; elif score &gt;= 70: grade = &#39;C&#39; elif score &gt;= 60: grade = &#39;D&#39; else: grade = &#39;F&#39; print(f&#39;등급: {grade}&#39;) . &#50696;&#51228;3 . #현재셀에서 바꾸기 shift + ctrl + h buy = 0 buy = int(input(&#39;물건 구매가를 입력하세요:&#39;)) if buy &gt;= 100000: dc = 10 elif buy &gt;= 50000: dc = 7.5 elif buy &gt;= 10000: dc = 5 else : dc = 0 print(f&#39;구매가:{buy}원&#39;) print(f&#39;할인율:{dc}%&#39;) print(f&#39;할인금액:{int(buy*dc/100)}원&#39;) print(f&#39;지불금액:{int(buy-(buy*dc/100))}원&#39;) . &#50696;&#51228;4 . n1 = int(input(&#39;숫자 1:&#39;)) n2 = int(input(&#39;숫자 2:&#39;)) n3 = int(input(&#39;숫자 3:&#39;)) min1= n1 # 첫번째 수 저장 if n2 &lt; min1: # 두번째와 비교 min1 = n2 # 두번째수가 작으면 min1 저장 if n3 &lt; min1: # 세번째 수 비교 min1 = n3 # 세번째 수가 작으면 min1 저장 print(&#39;가장 작은 수:&#39;, min1) . n1 = int(input(&#39;숫자 1:&#39;)) n2 = int(input(&#39;숫자 2:&#39;)) n3 = int(input(&#39;숫자 3:&#39;)) # 모든 값을 비교해야 합니다. if else,if elif를 사용하면 다른 값이 선택됩니다 (3,2,1 입력 후 테스트) min1 = n1 if n2 &lt; min1: # 두번째 수가 작으면 이후 비교 불가 min = n2 elif n3 &lt; min1: min1 = n3 print(&#39;가장 작은 수:&#39;, min1) . n1 = int(input(&#39;숫자 1:&#39;)) n2 = int(input(&#39;숫자 2:&#39;)) n3 = int(input(&#39;숫자 3:&#39;)) print(f&#39;가장 작은 수:{min(n1,n2,n3)}&#39;) . &#45436;&#47532;&#50672;&#49328;&#51088; . and : 논리곱 or : 논리합 not : 논리부정 . 논리 값을 판단해주는 연산자 입니다. . # and, or, not print(True and True) print(True and False) print(False and True) print(False and False) print() print(True or True) print(True or False) print(False or True) print(False or False) print() print(not True) print(not False) . &#50696;&#51228; . &#50696;&#51228;1 . age = int(input(&#39;나이를 입력하세요:&#39;)) price = 3000 if age &gt; 64 or &lt;= 7: price = 0 elif age &gt;= 8 and &lt;= 18: price =1000 print(f&#39;{price}원 입니다&#39;) . age = int(input(&#39;나이를 입력하세요:&#39;)) price = &#39;3000원&#39; if age &gt; 64 or age &lt;= 7: price = &#39;무료&#39; elif age &gt;= 8 and age &lt;= 18: price = &#39;1000원&#39; print(f&#39;{price} 입니다&#39;) . &#50696;&#51228;2 . user_id = &#39;ID1234&#39; user_pwd = &#39;PWD1234&#39; # 아이디 패스워드 입력 input_id = input(&#39;아이디:&#39;) input_pwd = input(&#39;패스워드:&#39;) #로그인 처리 if user_id == input_id and user_pwd == input_pwd: print(&#39;로그인 성공&#39;) else: print(&#39;로그인 실패&#39;) . &#50696;&#51228;3 . num1 = int(input(&#39;숫자1: &#39;)) num2 = int(input(&#39;숫자2: &#39;)) operator = input(&#39;연산기호(+,-,*,/) : &#39;) result= 0 # 처리 if operator == &#39;+&#39;: result = num1 + num2 elif operator == &#39;-&#39;: result = num1 - num2 elif operator == &#39;*&#39;: result = num1 * num2 elif operator == &#39;/&#39;: result = num1 / num2 # 출력 print(&#39;-&#39;*30) print(f&#39;{num1} {operator} {num2} = {result}&#39;) . num1 = int(input(&#39;숫자1: &#39;)) num2 = int(input(&#39;숫자2: &#39;)) operator = input(&#39;연산기호(+,-,*,/) : &#39;) result= 0 # 처리 if operator == &#39;+&#39;: result = num1 + num2 elif operator == &#39;-&#39;: result = num1 - num2 elif operator == &#39;*&#39;: result = num1 * num2 elif operator == &#39;/&#39;: if num2 != 0: result = num1 / num2 else: result = None # 출력 print(&#39;-&#39;*30) print(f&#39;{num1} {operator} {num2} = {result}&#39;) . num1 = int(input(&#39;숫자1: &#39;)) num2 = int(input(&#39;숫자2: &#39;)) operator = input(&#39;연산기호(+,-,*,/) : &#39;) result= 0 # 처리 if operator == &#39;+&#39;: result = num1 + num2 elif operator == &#39;-&#39;: result = num1 - num2 elif operator == &#39;*&#39;: result = num1 * num2 elif operator == &#39;/&#39;: if num2 != 0: result = num1 / num2 # 출력 print(&#39;-&#39;*30) if operator == &#39;/&#39; and num2 == 0: print(&#39;0으로 나눌 수 없습니다&#39;) else: print(f&#39;{num1} {operator} {num2} = {result}&#39;) . for i in range(3): num1 = int(input(&#39;숫자1: &#39;)) num2 = int(input(&#39;숫자2: &#39;)) operator = input(&#39;연산기호(+,-,*,/) : &#39;) result= 0 # 처리 if operator == &#39;+&#39;: result = num1 + num2 elif operator == &#39;-&#39;: result = num1 - num2 elif operator == &#39;*&#39;: result = num1 * num2 elif operator == &#39;/&#39;: if num2 != 0: result = num1 / num2 # 출력 print(&#39;-&#39;*30) if operator == &#39;/&#39; and num2 == 0: print(&#39;0으로 나눌 수 없습니다&#39;) else: print(f&#39;{num1} {operator} {num2} = {result}&#39;) . &#50696;&#51228; 4 . import random random.randint(1,6) . import random num1 = random.randint(1,6) print(&#39;주사위1:&#39;,num1) num2 = random.randint(1,6) print(&#39;주사위2:&#39;,num2) if num1 &gt; num2: print(&#39;주사위1이 이겼습니다&#39;) elif num1 &lt; num2: print(&#39;주사위2이 이겼습니다&#39;) else: print(&#39;비겼습니다&#39;) .",
            "url": "https://vrgoldenlab.github.io/DTpython01/2021/06/03/_05_31_day5_if.html",
            "relUrl": "/2021/06/03/_05_31_day5_if.html",
            "date": " • Jun 3, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "변수와 자료형",
            "content": "&#45936;&#51060;&#53552; &#51060;&#54644;&#54616;&#44592; . 정보 (information)을 얻기 위한 재료 | 데이터 혹은 자료라고 이야기하며 구체적으로 이야기 할 때는 값(value) 라고 한다. 신체검사시 키,몸무게,시력 등의 구체적인 특성이 value 이 값을 모아 &#39;2021년 신체검사 결과&#39;로 만들면 data 신장을 체중으로 나누어 비만도 위험군을 선별하면 information . | . variable . 변수 - 값을 저장하는 공간 | 변수명 - 값을 저장하는 공간의 이름 | . &#48320;&#49688;&#50752; &#44288;&#44228;&#46108; &#51452;&#50836; &#51089;&#50629; . 변수를 생성(declaration)해 값 저장하기(assignment) | 변수를 호출해(call)하고 값 참조(reference) | . cal_test = 10*10+10/10 # 계산값을 변수명 cal_text에 저장, 변수 생성과 값저장을 동시에 수행 print(cal_test) #변수 num1을 호출해 참조하여 출력 . &#48320;&#49688;&#47749; &#44061;&#52404; &#51060;&#47492; &#51221;&#54616;&#44592; &#44592;&#51456; . 객체 - 파이썬을 구성하는 모든 요소 . 알파벳,숫자,공백을 표현하기 위한 _ | 객체명은 첫문자로 숫자를 사용할 수 없다 | 혼동하기 쉬운 문자 변수는 사용하지 않는것이 좋다. &#39;l&#39;(소문자 엘),I(대문자 아이), O(대문자 오),o(소문자 오) 등 . | 파이썬이 사용하는 객체명(키워드)는 사용할 수 없다 . &#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;,&#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;,&#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39; . | . &#54028;&#51060;&#50028; &#54364;&#51456; &#51089;&#47749; &#44592;&#51456; . snake_case: 모든 단어를 소문자로 구성하고 단어 사이를 _로 구분 | CamelCase: 단어의 첫 문자를 대문자로 나머지는 소문자로 공백없이 | mixedCase: CamelCase와 같으나 객체명 첫글자는 소문자 사용 | . https://www.python.org/dev/peps/pep-0008/#id34 . data type . 값들의 특성에 따른 분류 8가지의 기본 data type를 학습합니다. . 숫자형(정수,실수) | 문자열 | bool : 판단의 결과 참, 거짓 | 튜플 | 리스트 | 집합 | 딕션너리 | 형변환 | 1.&#49707;&#51088;&#54805; . 정수: 소숫점이 없는 숫자.자료형명 int 실수: 소숫점이 있는 숫자. 자료형명 float . a = 1 b = 1.0 c = 00.00310 d = .554 e = 15. print(a,b,c,d,e,sep=&#39; &#39;) print(a*b,c/d,(e-3)*d,sep=&#39; &#39;) # 실수값에 영향이 없는 0은 제거된다. # 산술연산자 +,-,*,/ 사용 가능 # 나눗셈을 제외한 정수간 계산의 결과값은 정수,정수와 실수 간 계산값은 실수 . type_list = [a,b,c,d,e] for i in range(5): print(type(type_list[i]),type_list[i]) . &#49328;&#49696;&#50672;&#49328;&#51088; . 사칙연산자 +, -, * | 제곱을 나타내는 ** | 나머지를 산출하는 % (Modulus), | 나누기에 소숫점 이하를 버리는 // 연산자(Floor Division) | . &#48708;&#44368;&#50672;&#49328;&#51088; . 관계연산자로도 불리운다 | 등호(==), 같지 않음(!=), 부등호(&lt;, &gt;, &lt;=, &gt;=) 등이 있다. | . num1 = 100 num1 = num1 + 100 num1 += 100 print(num1) . num2 = 100 num3 = 200 num2 += num3 # num2 = num2 + num3 print(num2) num2 -= num3 # num2 = num2 - num3 print(num2) num2 *= num3 # num2 = num2 * num3 print(num2) . 2.&#47928;&#51088;&#50676; . &#47928;&#51088;&#50676;&#51008; &#53581;&#49828;&#53944;&#51032; &#44592;&#48376; &#51088;&#47308;&#54805; . 문자를 사슬(string)처럼 나영한 값, 자료형명 str . 변수명이나 함수명과 구분하기 위해 따옴표로 열고 닫아 생성합니다. . &#47928;&#51088;&#50676; &#45236;&#51032; &#53945;&#49688;&#53412; . &#39; =&gt; &#39; &quot; =&gt; &quot; =&gt; n =&gt; 줄바꿈(newline), enter t =&gt; 줄맞춤(intent),tap . print( &#39;셀 병합 n t &#39;shift key &#39;를 누른후 n t t병합을 원하는 셀들을 다중선택 후 shift+M&#39;) . # n없이 enter로 줄바꿈, &#39;, &quot;없이 따옴표 사용 가능 print(&#39;&#39;&#39;{ 마크다운 전환: ctrl + m m 코드로 전환: ctrl + m y &quot; 사용 가능 &quot; &#39; &#39; }&#39;&#39;&#39;) . #주민번호,우편번호등 값이 0으로 시작되는 정수 #파이썬에서는 정수가 0으로 시작하면 정수값 입력오류로 문법 오류 처리 print(06002) . print(210101-1111111) print(&#39;210101-1111111&#39;) . &#47928;&#51088;&#50676;&#50640;&#49436; &#49324;&#50857;&#46104;&#45716; &#54632;&#49688; . join : 문자열을 원하는 글자로 더한다. | split : 문자열을 원하는 글자로 나눈다. | strip : 문자열 앞뒤의 공백을 지운다. 문자열 내부의 공백은 지우지 않는다. | replace : 문자열의 특정 글자를 다른 글자로 바꾼다. | in : 문자열 안에 해당 글자가 있는지 확인 | not in : 문자열 안에 해당 글자가 없는지 확인 | count : 특정 글자가 문자열에 몇번 사용되었는지 확인 | find : 문자열에서 특정 글자의 위치정보 확인 | capitalize : 문자열의 첫 글자를 대문자로 변환 | lower : 모든 글자를 소문자로 변환 | upper: 모든 글자를 대문자로 변환 | starstwith : 해당 문자열이 특정 글자로 시작되는지 확인 | endswith : 해당 문자열이 특정 글자로 끝나늕 확인 | . print(&#39;-&#39;.join(&#39;Hello World&#39;)) print(&#39;Welcome to python&#39;.split(&#39; &#39;)) print(&#39; welcome to python world &#39;.strip()) print(&#39;welcome to python world&#39;.replace(&#39;py&#39;,&#39;Py&#39;)) text_1 = &#39;welcome to python world&#39; print(&#39;Py&#39; in text_1) print(&#39;Py&#39; not in text_1) print(text_1.count(&#39;w&#39;)) print(text_1.find(&#39;py&#39;)) print(text_1.index(&#39;p&#39;)) print(text_1.capitalize()) print(text_1.lower()) print(text_1.upper()) print(text_1.startswith(&#39;hello&#39;)) print(text_1.endswith(&#39;world&#39;)) . 3.bool . 주어진 조건 안에서 참,거짓을 판단해서 결과를 담는 자료형 값 True,False . a = 8 == 12 print(a,type(a)) b = &#39;apple&#39; == &#39;APPLE&#39; print(b,type(b)) c = 8 != 12 print(c,type(c)) . &#45436;&#47532;&#50672;&#49328;&#51088; . 조건식과 조건식을 연결하는 연산자 논리합 =&gt; a and b : a나 b 모두 참일때만 참 논리곱 =&gt; a or b : a나 b 중 하나만 참이어도 참 부정 =&gt; not a : a가 참이면 거짓,거짓이면 참 . | . a = 10 &lt; 11 #True b = 10 &gt; 11 #False print( a and a) # True and True print( a and b) # True and False print( b and b) # False and False print( a or b) # True or False print( not a ) # not True print( not a or (a or b)) . print(True + False) .",
            "url": "https://vrgoldenlab.github.io/DTpython01/2021/05/25/datatype%EB%B3%B5%EC%8A%B5.html",
            "relUrl": "/2021/05/25/datatype%EB%B3%B5%EC%8A%B5.html",
            "date": " • May 25, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "첫째날. 코딩의 기초를 살펴봅니다.",
            "content": "코랩에서 코드를 입력하고 실행 버튼을 누르면 계산 결과를 확인할 수 있습니다. | 코랩에서 코드추가 버튼 ( 파일 메뉴 아래의 +코드 ) 를 클릭하면 새로운 코드를 입력할 수 있습니다 | shift + enter 코드 실행 후 다음 셀로 이동합니다 | . 코딩 초보자들이 실제로 코드를 만들어 보려면 프로그래밍 언어를 다 외우는 것은 오히려 뭐가 뭔지 모르게 될 경우가 있습니다. 코드에 필요한 경우에 기본적인 코딩 요소를 연결해서 사용하는 것에 익숙해 지도록 합니다. . &#50640;&#47084; . 안녕하세요 . NameError Traceback (most recent call last) &lt;ipython-input-1-041a565a82b3&gt; in &lt;module&gt;() -&gt; 1 안녕하세요 NameError: name &#39;안녕하세요&#39; is not defined . &#39;test&quot; . File &#34;&lt;ipython-input-2-f069d7da0475&gt;&#34;, line 1 &#39;test&#34; ^ SyntaxError: EOL while scanning string literal . 자료형 확인 . a = 5 b= 3.14 c= &#39;3.14&#39; d= &quot;3.14&quot; e = -3.14 f=&#39;abcd&#39;+&#39;가나다라&#39; g=&#39;123&#39;*3 print(type(a),type(b),type(c),type(d),type(e),type(f),type(g)) . &lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;str&#39;&gt; &lt;class &#39;str&#39;&gt; . 1st = &#39;첫번째&#39; f**t = &#39;첫번째&#39; f^st = &#39;첫번째&#39; Temp = 1000 print(temp) print = &#39;출력합니다&#39; print(print) . 프로그래밍의 기본은 다음과 같습니다. . . 변수 | 배열 | 조건 분기 | 반복 | 함수 | . 1. &#48320;&#49688; . 변수 이름 정하기 . . 변수명의 규칙 . 영문 대소문자,숫자,밑줄(_) 로만 만들수 있습니다 | 변수명은 숫자로 시작할 수 없습니다. | 영문 대소문자를 구분합니다 A와 a는 다른 변수입니다 | 파이썬 내장 함수는 변수명으로 사용할 수 없습니다.( 예: False,True,None,and,as, break, class ....) | 위의 규칙을 지키면서 변수에 저장된 정보가 어떤 것인지 예상할 수 있는 이름이면 좋습니다. . # 하지만 계산후 결과값은 일회성으로 보여지기만 합니다. # 결과나 과정,변환된 값을 유지해야 하는 경우 프로그램에서 변수가 필요합니다. print(100+200) print(&quot;Hello World!&quot;) . 300 Hello World! . 변수란 말 그대로 변할 수 있는 수를 말합니다. 코딩에서 특정한 값을 보관힐 수 있는 공간으로 사용됩니다. 계산 결과나 사용자의 입력한 값 혹은 출력해야 하는 값에 사용됩니다. . temp = 100 # temp 라는 변수를 만들고 temp 공간에 100 을 넣는다는 의미 temp # temp 값을 확인하겠다는 의미입니다. 코랩외의 환경에서는 print(temp) . 100 . temp2 = 200 print(temp2) . 200 . temp3 = temp + temp2 # temp3에 temp의 값과 temp2의 값을 더한 새로운 값 temp3 . 300 . 변수를 사용해 문자 더하기 프로그래밍 . 변수는 숫자나 문자도 넣어 사용 가능합니다. 문자는 문자끼리 숫자는 숫자끼리 연산도 가능합니다. . str1 = &#39;문자&#39; # str1라는 변수를 만들고 &#39;문자&#39;라는 값을 넣습니다 . str2 = &#39;더하기&#39; . str3 = str1 + str2 print(str3) print(len(str3)) # str3 변수에 담긴 문자열의 길이를 출력 요청 . 문자더하기 5 . 변수의 자료형 . . 파이썬은 어떤 값을 담고 있느냐에 따라 변수의 자료형이 달라집니다. . 문자값을 담고 있으면 문자형 변수, 숫자값을 담고 있을 때는 정수값인지 실수값인지에 따라 정수형 변수, 실수형 변수라고 합니다. . 100은 정수형 데이터, 100.0 은 실수형 데이터, &#39;100&#39;은 문자형 데이터 . . type(str3) . str . type(temp) . int . temp = 100.25 type(temp) . float . 강제로 변수형 바꾸기 . 문자형 자료를 숫자로 바꾸어 계산을 해야 하는 경우나 정수형 변수를 문자형으로 출력 해야 할 때가 있습니다. 이런 경우 변수를 강제 변환하는 명령어를 사용합니다. . str4 = &#39;100&#39; type(str4) . str . type(int(str4)) . int . 2. &#48176;&#50676; . 여러 값을 넣을 수 있는 배열 . 변수는 하나의 값만 넣을 수 있지만 배열은 여러개의 값을 넣어 사용할 수 있습니다. 배열의 가장 앞에 있는 원소의 번호는 1이 아니라 0입니다. 첫번째 원소에 접근하기 위해서는 0 인덱스와 대괄호를 사용합니다. 마지막 원소는 인덱스 -1과 대괄호를 사용합니다. . 기타 배열로는 튜플과 딕션너리가 있습니다. . 튜플은 리스트처럼 요소를 일렬로 저장하지만, 안의 요소를 변경,추가,삭제를 할 수 없습니다. 읽기 전용 리스트라 할 수 있습니다. . 딕셔너리는 연관된 값을 묶어서 저장하는 자료형 입니다. {}중괄호안에 키:값 형식으로 저장합니다. 사전에서 단어 찾듯이 값을 가져올 수 있습니다. . 배열의 길이와 배열 원소의 접근 . len(): 배열의 데이터가 많을 경우 배열 원소의 길이를 알려주는 함수를 사용합니다. . list = [ 1,10,15,2 ] 일때 list의 1번째 원소는 1 (인덱스 번호는 0) list의 2번째 원소는 10 (인덱스 번호는 1) list의 3번째 원소는 15 (인덱스 번호는 2) list의 4번째 원소는 2 (인덱스 번호는 3 ,혹은 -1) . list1 = [1,2,3,4,5,6,7,8,9,10] print(list1) . [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] . len(list1) # list1 배열 원소값을 요청 #len은 문자열의 길이도 구할 수 있습니다. . 10 . print(list1[0]) #list1배열의 첫번째 원소값을 출력 print(list1[-1]) #list1배열의 마지막 원소값을 출력 #list1배열의 마지막 원소값을 문자열과 함께 출력 print(&#39;list1 배열의 마지막 원소값은 &#39; + str(list1[-1]) + &#39;입니다&#39;) . 1 10 list1 배열의 마지막 원소값은 10입니다 . 슬라이싱 : 배열 원소의 일정 부분만 가져오기 . 배열의 원소 중 일부분만 가져와서 사용하는 경우나 전체 데이터를 여러부분으로 나누어서 사용할 경우 사용하는 방법입니다. 슬라이싱할 처음 위치와 마지막 위치를 정해주면 그 사이 값을 가져옵니다. . print(list1[2:6]) #list1 배열의 인덱스 2번부터 6번 앞까지의 데이터 출력 요청 print(list1[2:]) #list1 배열의 인덱스 2번부터 마지막까지의 데이터 출력 요청 print(list1[:6]) #list1 배열의 처음부터 인덱스 6번부터 앞까지의 데이터 출력 요청 print(list1[:-1]) #list1 배열의 처음부터 인덱스 마지막 앞까지의 데이터 출력 요청 . [3, 4, 5, 6] [3, 4, 5, 6, 7, 8, 9, 10] [1, 2, 3, 4, 5, 6] [1, 2, 3, 4, 5, 6, 7, 8, 9] . range를 사용해서 리스트 만들기 . . 리스트 = list( range(횟수) ) | 리스트 = list( range(시작,끝) ) | 리스트 = list( range(시작,끝,증가폭) ) | . list_rg1 = list(range(11)) list_rg2 = list(range(5,12)) list_rg3 = list(range(-4,5,2)) list_rg4 = list(range(20,-1,-1)) list_rg5 = list(&#39;hello world&#39;) print(&quot;list_rg1은&quot; , list_rg1) print(&quot;list_rg2은&quot; , list_rg2) print(&quot;list_rg3은&quot; , list_rg3) print(&quot;list_rg4은&quot; , list_rg4) print(&quot;list_rg5은&quot; , list_rg5) . list_rg1은 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] list_rg2은 [5, 6, 7, 8, 9, 10, 11] list_rg3은 [-4, -2, 0, 2, 4] list_rg4은 [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] list_rg5은 [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . list_rg5 = list(&#39;hello world&#39;) list_rg5[0] = &#39;H&#39; print(&quot;list_rg5의 0번째 요소 대문자로 수정&quot; , list_rg5) del list_rg5[5] print(&quot;list_rg5의 5번째 요소 삭제&quot; , list_rg5) . list_rg5의 0번째 요소 대문자로 수정 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] list_rg5의 5번째 요소 삭제 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . 3.&#48152;&#48373;&#47928; (for) . 반복하기는 컴퓨터의 특기 중 하나입니다. . 컴퓨터는 아무리 단순한 일도 수백 번, 수 만번씩 반복해도 명령대로 처리하고 그 결과를 보여 줍니다. . 파이썬에서 사용하는 반복문은 for와 while 이 있습니다. . for 반복은 range (범위)를 사용하며 배열의 개념과 관련이 있습니다. . for 변수 in range: . 반복할 내용 . . 파이썬의 인덴트 intent . 파이썬에서는 반복문,조건문,함수 등 코드 블록을 표시하기 위해 중괄호를 사용하지 않고 들여쓰기를 합니다. 들여쓰기의 기본은 4칸이며 tap 키를 사용합니다. . for 문 사용시 흔히 하는 실수는 반복 블럭을 정하는 부분입니다. . for x in range(): 에서 콜론(:) 을 빠뜨리지 않았는지 반복할 내용에서 정확히 들여쓰기가 되었는지 확인합니다. . for x in range(0,3,1): print(&#39;안녕하세요 for문을 공부중 입니다&#39;) . 안녕하세요 for문을 공부중 입니다 안녕하세요 for문을 공부중 입니다 안녕하세요 for문을 공부중 입니다 . for x in range(5): # range(5)은 0,1,2,3,4 이므로 변수 x값을 차례대로 0,1,2,3,4로 바꾸면서 반복 블록 실행 print(x) # 반복될 내용 - 변수 x값을 출력 요청합니다 . 0 1 2 3 4 . for x in range(2,4): # range(2,4)은 2부터 4번째 앞까지 이므로 변수 x값을 차례대로 2,3로 바꾸면서 반복 블록 실행 print(x) # 반복될 내용 - 변수 x값을 출력 요청합니다 . 2 3 . list2 = [] for x in range(0,10): print(x) . 0 1 2 3 4 5 6 7 8 9 . &#39;&#39;&#39; 합계를 구하는 변수의 처음 값은 0으로 정합니다 range의 처음 값은 변수 a로 하고 1값을 넣습니다 range의 마지막 값은 변수 b 로 하고 11값을 넣습니다 a부터 b-1까지 x값을 바꾸면서 반복합니다 현재의 test_sum값에 x값을 더합니다 현재의 x값과 test_sum 값을 출력합니다 반복이 완료된 후 &#39;-&#39;을 50번 반복 출력하고 총합 문자열을 출력합니다 &#39;&#39;&#39; test_sum = 0 a = 1 b = 11 for x in range (a,b): test_sum += x # print (&quot;x:&quot;, x , &quot;sum:&quot; , test_sum) print(&#39;-&#39; * 50) print( a ,&#39; 부터 &#39;, b-1,&#39; 까지 더한 총합은 &#39; , test_sum , &#39;입니다&#39;) . -- 1 부터 10 까지 더한 총합은 55 입니다 . 4. &#51312;&#44148;&#47928; (if,else,elif) . 파이썬 프로그래밍을 할 때 반복문과 함께 자주 사용되는 것이 조건문입니다. . 조건에 해당되는지, 해당되지 않는지에 따라 서로 다른 명령을 수행하도록 합니다. . if문의 구조 . if 조건문: 수행할 문장1 수행할 문장2 ... else: 수행할 문장A 수행할 문장B ... . | . 들여쓰기 if문을 만들 때는 if 조건문: 바로 아래 문장부터 if문에 속하는 모든 문장에 들여쓰기를 해주어야 합니다. 아래와 같이 기술하면 오류처리 됩니다. if 조건문: 수행할 문장1 수행할 문장2 수행할 문장3 . | . score = int(input(&#39;점수를 입력하세요&#39;)) if score &gt;= 90: print(&#39;A&#39;) elif score &gt;= 80: print(&#39;B&#39;) elif score &gt;= 70: print(&#39;C&#39;) elif score &gt;= 60: print(&#39;D&#39;) else: print(&#39;F&#39;) print(score,&#39;학점입니다&#39;) . 점수를 입력하세요90 A 90 학점입니다 . bol_chk = True if bol_chk: print(&quot;a&quot;) print(&quot;b&quot;) print(&quot;c&quot;) . 파이썬이 다른 언어보다 보기 쉬운 이유는 콜론(:)을 사용하여 들여쓰기를 사용하기 때문입니다. if 조건문 뒤에는 반드시 콜론(:)이 붙고 while이나 for, def, class문에도 역시 문장의 끝에 콜론(:)이 항상 들어가는 것을 주의 합니다. . 비교연산자 | . 이번에는 조건문에 비교연산자(&lt;, &gt;, ==, !=, &gt;=, &lt;=)를 쓰는 방법에 대해 알아보자. . 다음 표는 비교 연산자를 잘 설명해 준다. . 비교연산자 설명 x &lt; y x가 y보다 작다 x &gt; y x가 y보다 크다 x == y x와 y가 같다 x != y x와 y가 같지 않다 x &gt;= y x가 y보다 크거나 같다 x &lt;= y x가 y보다 작거나 같다 . test_num1 = 11 if test_num1 &gt; 10: #if 뒤에 조건을 작성하고 마지막에 콜론 :을 붙입니다 print( test_num1 ,&#39;은 10보다 큽니다&#39;) #4칸 띄운 후 조건이 참일 때의 명령문을 작성 else: print( test_num1, &#39;은 10보다 작거나 같습니다&#39;) . 11 은 10보다 큽니다 . import random # random 무작위 수를 발생시키는 모듈 for x in range(3): # 3번 반복 test_num1 = random.randint(1,15) # 1에서 15사이의 임의의 수를 test_num1에 넣는다 if test_num1 &gt; 10: #if 뒤에 조건을 작성하고 마지막에 콜론 :을 붙입니다 print( test_num1 ,&#39;은 10보다 큽니다&#39;) #4칸 띄운 후 조건이 참일 때의 면령문을 작성 else: print( test_num1, &#39;은 10보다 작거나 같습니다&#39;) . 7 은 10보다 작거나 같습니다 8 은 10보다 작거나 같습니다 13 은 10보다 큽니다 . import random # random 무작위 수를 발생시키는 모듈 for x in range(10): # 10번 반복 test_num1 = random.randint(1,15) # 1에서 15사이의 임의의 수를 test_num1에 넣는다 if test_num1 &gt; 10: #if 뒤에 조건을 작성하고 마지막에 콜론 :을 붙입니다 print( test_num1 ,&#39;은 10보다 큽니다&#39;) #4칸 띄운 후 조건이 참일 때의 면령문을 작성 elif test_num1 == 10: # elif 여러개의 조건이 있을때 사용하고 마지막에 콜론:을 붙인다 print( test_num1, &#39;은 10과 같습니다&#39;) else : # 앞의 조건식이 모두 맞지 않을때 print( test_num1, &#39;은 10보다 작습니다&#39;) . 14 은 10보다 큽니다 10 은 10과 같습니다 15 은 10보다 큽니다 2 은 10보다 작습니다 6 은 10보다 작습니다 14 은 10보다 큽니다 2 은 10보다 작습니다 2 은 10보다 작습니다 9 은 10보다 작습니다 6 은 10보다 작습니다 . 5. &#48152;&#48373;&#47928; (while) . while 명령어 뒤에 오는 조건이 참일 동안 반복 . . while 반복문은 조건식으로만 동작하고 반복 수행문에 조건에 영향을 주는 변화식이 들어갑니다. . for는 반복할 횟수가 정해졌을때 while은 반복할 횟수가 정해지지 않았을 때 사용합니다. . 중첩반복은 테이블 형태의 데이터를 다룰 때 사용합니다. . x = 0 #변수 x에 초기값 0을 넣습니다 while x &lt; 15: #while 조건식 - 변수x가 15보다 작을 경우 반복 print(&#39;Hello world&#39;, x) #반복처리 코드 x += 1 #조건 변화 처리 - 반복시 x를 1씩 증가합니다 . Hello world 0 Hello world 1 Hello world 2 Hello world 3 Hello world 4 Hello world 5 Hello world 6 Hello world 7 Hello world 8 Hello world 9 Hello world 10 Hello world 11 Hello world 12 Hello world 13 Hello world 14 . break, continue로 반복문 제어 . . break는 for와 while의 반복을 중단합니다. . continue는 반복을 유지한 상태에서 코드 실행만 건너뛰는 역할을 합니다. . x = 0 #초기값 while True: #무한루프 print (x) x += 1 #변수x를 1씩 증가 if x == 10: #변수 x가 10일 때 break #반복문을 끝내고 while 문을 벗어남 . 0 1 2 3 4 5 6 7 8 9 . x = 0 #초기값 while x &lt; 100: #변수 x가 100보다 은 동안 반복 x += 1 if x % 2 == 0: #x 를 17로 나누어서 나머지가 0이면 짝수 continue #아래코드를 실행하지 않고 건너뜀 print (x) if x == 21: #변수 x가 51일 때 break #반복문을 끝내고 while 문을 벗어남 . 1 3 5 7 9 11 13 15 17 19 21 . 6. &#54632;&#49688; . 자주 사용되는 프로그램의 일부분을 분리하여 정의 . . 함수가 어떤 기능을 할 건지 파이썬에게 알려주는 것을 &#39;함수를 정의한다&#39;라고 합니다 . 만들어진 함수를 실제로 사용하는 것을 &#39;함수를 호출한다&#39;라고 합니다. . def hello(): #hello 함수 정의 print(&#39;Hello Python!&#39;) hello() #hello 함수 호출 hello() . Hello Python! Hello Python! . def hello(name): print(&#39;Hello &#39; ,name ) list_name = [&#39;철수&#39;,&#39;영희&#39;,&#39;순희&#39;,&#39;영수&#39;] for x in list_name: hello(x) . Hello 철수 Hello 영희 Hello 순희 Hello 영수 . def sum_func(n): d_sum = 0 #합을 구하기 위한 변수 초기화 for x in range(1,n+1): #range를 1부터 n+1까지로 정해 1부터 n까지 x값을 변화하면 반복 d_sum += x #현재 합에 x를 다시 더한다 return d_sum #계산된 d_sum 값을 결과값으로 돌려줍니다 print(sum_func(10)) print(sum_func(1000)) . 55 500500 .",
            "url": "https://vrgoldenlab.github.io/DTpython01/2021/05/24/day1-sbapython.html",
            "relUrl": "/2021/05/24/day1-sbapython.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Colab 사용하기",
            "content": "1. Colab&#51060;&#46976;? . 구글 클라우드 기반의 무료 개발 환경 서비스 | 환경 설정 및 실행까지 매우 빠른 환결 | 딥러닝 실행이 가능한 고사양 환경 제공 | Jupyter Notebook 환경 제공 | 대부분의 패키지들이 이미 설치된 환경 | 여러 사용자와 동시에 사용 가능 | PC,태블릿,모바일 상관없이 인터넷 브라우저만 있으면 사용 가능 | 목차나 Markdown 미리보기 등 다양한 기능 제공 | 구글 드라이브와 연동 | Git,Github와 쉽게 연동 | . &#44396;&#44544;&#50640;&#49436; &#47564;&#46304; Colaboratory&#45716; &#53364;&#46972;&#50864;&#46300; &#44592;&#48152;&#51032; &#44060;&#48156;&#54872;&#44221; . 구글의 CPU, RAM, GPU를 사용해서 Jupiter Notebook과 같은 환경을 구성 . Colaboratory는 Google 리서치팀에서 개발한 제품입니다. . Colab을 사용하면 누구나 브라우저를 통해 임의의 Python 코드를 작성하고 실행할 수 있습니다. . Colab은 특히 머신러닝, 데이터 분석 및 교육에 적합합니다. . Colab은 설정 없이도 사용 가능한 호스팅 Jupyter 메모장 서비스로, GPU를 포함한 컴퓨팅 리소스를 무료로 제공합니다. . colab &#51452;&#51032; &#49324;&#54637; . 구글 계정 필요 | 최대 세션 유지 시간 존재(12시간) | 세션이 종료되면 결과값,데이터 모두 삭제 | 소스코드는 구글 드라이브에 저장 | . &#54256;&#53944; &#49444;&#51221; . 코랩 글자크기 변경 오른쪽 상단 톱니바퀴 설정-&gt; 편집기-&gt; 글꼴 크기 | 폰트 변경 크롬 설정 - 글꼴 맞춤 설정 - 고정폭 글꼴 에서 폰트변경 D2Coding 직접 접속 chrome://settings/fonts | D2Coding 다운로드 https://github.com/naver/d2codingfont | . colab &#49324;&#50577; . 플랫폼 | . import platform platform.platform() . &#39;Linux-5.4.109+-x86_64-with-Ubuntu-18.04-bionic&#39; . 운영체제 | . !cat /etc/issue.net . Ubuntu 18.04.5 LTS . CPU 사양 | 메모리 사양양 | . !cat /proc/cpuinfo . !cat /proc/meminfo . 디스크 사양 | . !df -h . 파이썬 버전 | . !python --version . Python 3.7.10 . 2. Colab &#50672;&#44208;&#54616;&#44592; . 구글 드라이브로 이동 | 구글 드라이브내 마우스 오른쪽 클릭(새로만들기) -&gt; 연결할 앱 더보기 | . colab을 검색하여 설치합니다 | 다시 구글 드라이브로 돌아가 마우스 오른쪽버튼을 클릭(새로만들기)하면 Google Colaboratory를 확인 할 수 있습니다 | . 3. GPU,TPU &#49324;&#50857;&#54616;&#44592; . 런타임 유형 변경(Change runtime type) 필요 . None : CPU만 사용 | GPU:하드웨어 가속으로 GPU(graphics processing unit)사용 | TPU:하드웨어 가속으로 TPU(Tensor Processing Unit)사용 | . COLAB 상단 선택메뉴 중 런타임 -&gt; 런타임 유형 변경에서 사용합니다. . 하드웨어 가속기 -&gt; GPU,TPU 선택 후 저장하면 됩니다. . 클라우드 환경이고 구글의 무료 자원을 사용하기 때문에 GPU,TPU를 무한정 사용할 수는 없습니다. Keras나 Tensorflow등을 사용할 때 사용합니다. . !nvidia-smi . Fri May 21 12:42:55 2021 +--+ | NVIDIA-SMI 465.19.01 Driver Version: 460.32.03 CUDA Version: 11.2 | |-+-+-+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 Tesla K80 Off | 00000000:00:04.0 Off | 0 | | N/A 58C P8 33W / 149W | 0MiB / 11441MiB | 0% Default | | | | N/A | +-+-+-+ +--+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | No running processes found | +--+ . &#54028;&#51068; &#51200;&#51109; . Jupyter Notebook 환경에서 파일 저장 및 다운로드드 | . %%writefile test.txt text . Writing test.txt . !cat test.txt . text . from google.colab import files files.download(&#39;test.txt&#39;) . upload = files.upload() . Upload widget is only available when the cell has been executed in the current browser session. Please rerun this cell to enable. Saving Backup-codes.txt to Backup-codes.txt . !ls . Backup-codes.txt sample_data test.txt text.txt . 4. Google Drive&#50752; &#50672;&#44208; . Drive Mount . . 좌측의 메뉴에서 폴더 모양을 선택 | 드라이브 마운트 버튼을 클릭합니다 | 노트북이 google 드라이브 파일에 엑세스 허용 질문에 드라이브 연결을 선택합니다 | 본인의 Google Drive 경로로 이동합니다 | . 방법 2 . . 구글드라이브 마운트 명령어를 입력합니다 | 명령어 실행 후 화면에 표시된 링크로 접속합니다 | 연결할 구글 아이디로 로그인을 하고 허용을 누릅니다 | 드라이브 마운트 허용코드를 복사합니다 (화면 코드옆 복사버튼 사용) | Authorization Code 입력 부분에 붙여넣기 후 엔터를 치면 연결됩니다 | . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . !ls /content/drive . MyDrive . 5.&#53076;&#47017; &#45800;&#52629;&#53412;(ctrl+m,h) . 선택된 셀을 실행 : Ctrl + Enter | 선택된 셀을 실행 후 다음 셀로 포커스 이동 : Shift + Enter . | 실행 후 다음줄로 이동 : Alt + Enter . | 선택모드에서 화살표 방향키 : 셀 포커스를 위 아래로 움직일 수 있음 | . 마크다운으로 전환 : Ctrl + M M . | 코드로 전환 : Ctrl + M Y . | 저장 : Ctrl + S | . 코드셀에 줄번호 부여 : Ctrl + M L | . 바로 윗줄에 셀 생성 : Ctrl + M A . | 바로 아랫줄에 셀 생성 : Ctrl + M B . | 셀 삭제 : Ctrl + M D . | 셀 병합 : (shift를 누른 상태에서 병합을 원하는 셀들을 한번에 다중 선택 후), Shift + M | . 셀 분할 : (분기를 원하는 부분에 커서를 지정 후), Ctrl + Shift + - | . 코드가 오래 실행되어 멈추고 싶은경우 : Ctrl+ M + I | . 6.Jupyter Notebook . IPython Shell 브라우저 기반 그래픽 인터페이스 | 파이썬과 IPython문장 실행 | 서식 있는 텍스트와 정적/동적 시각화, 수학 공식 표현 | . &#49444;&#47749;&#48372;&#44592; . help() 를 붙여 파이썬 객체 요약 정보 사용 | . help(print) . Help on built-in function print in module builtins: print(...) print(value, ..., sep=&#39; &#39;, end=&#39; n&#39;, file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream. . ? 를 붙여 객체 요약 정보 | . list1 =[1,2,3] list1? . max? . def add_number(a, b): &quot;&quot;&quot; Add two numbers together Returns - the sum: type of arguments &quot;&quot;&quot; return a + b . add_number? . add_number?? . &#51088;&#46041; &#50756;&#49457; . Tab으로 객체와 모듈,인터페이스 내용을 자동 완성 | . list1 = [1,2,3,4,5] list1.append . *카드로 단어의 중간이나 마지막 글자로 매칭 하여 객체나 속성 완성 | . list.*app*? . &#47588;&#51649;&#47749;&#47161;&#50612; . Jupiter Notebook 환경에서 파일 저장 및 실행 | . %%writefile test.py print(&quot;안녕하세요&quot;) . Writing test.py . %run test.py . 안녕하세요 . 코드 실행 시간 | . %%timeit? . %%timeit list1 = [] for i in range(10000): list1.append(i ** i) . 1 loop, best of 5: 6.09 s per loop . history . in,out 객체를 사용하여 명령어 와 출력 결과 이력 사용 | . In . In[33] . Out[1] . _이전 출력값 | . print(_) . print(__) . history 를 사용한 입력 이력 | . %history -n 1-10 . &#49472; &#47749;&#47161;&#50612; . 명령어 앞에 !를 붙여서 사용 | . ls 디렉토리 리스트 | . !ls . drive sample_data test.py . pwd 현재 경로 | . !pwd . /content . cd 디렉토리 변경 | . !cd /content/drive/MyDrive/sba파이썬교육/colab/ &amp;&amp;ls . %cd /content/drive/MyDrive/sba파이썬교육/colab/ . &#47560;&#53356;&#45796;&#50868;(Markdown) . 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용 | 웹에서 보다 빠르게 컨텐츠를 작성 | . &#51228;&#47785; &#54364;&#49884; . This is a H1 . This is a H2 . This is a H3 . This is a H4 . This is a H5 . This is a H6 . &#48660;&#47197; . This is a first blockqute. . This is a second blockqute. . This is a third blockqute. . &#49692;&#49436; &#51080;&#45716; &#47785;&#47197; . 숫자와 점을 사용 . 첫번째 | 두번째 | 세번째 | &#49692;&#49436;&#50630;&#45716; &#47785;&#47197; . 글머리 기호: *, +, - 지원 . Python . 파이썬 파이썬 Python | . | . | Python . 파이썬 파이썬 Python | . | . | Python . 파이썬 파이썬 Python | . | . | . &#44396;&#48516;&#49440; . . . . . &#47553;&#53356; . 링크 텍스트 Google . &#51460;&#48148;&#45000; . 3칸 이상 띄어쓰기( )를 하면 줄이 바뀐다. | . &#53076;&#46377; &#50672;&#49845; . input()과 print()를 이용하여 인사말을 만들어 봅니다. | . &#39;&#39;&#39; 입력과 출력을 연습해 봅니다 &#39;&#39;&#39; print(&#39;이름을 입력하세요: &#39;) # 이름 입력요청 메세지를 화면에 출력합니다 name = input() #화면에서 키보는 입력값을 받아 name변수에 넣습니다 print(name,&#39;은 오늘부터 파이썬을 공부하게 되었습니다&#39;) #이름변수와 텍스트 내용을 화면에 출력합니다 . print(&#39;조원을 입력하세요 &#39;) #name1 = input() #name2 = input() #name3 = input() #name4 = input() print( &#39;와 파이썬을 공부하게 되었습니다&#39;) .",
            "url": "https://vrgoldenlab.github.io/DTpython01/2021/05/20/colab-sbapython.html",
            "relUrl": "/2021/05/20/colab-sbapython.html",
            "date": " • May 20, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "둘째날 - 자료형과 데이터 타입 예제 작성",
            "content": "주석달기 . print(&#39;test1!!&#39;) print(&#39;test2!!&#39;) print(&#39;test3!!&#39;) . print(&#39;test1!!&#39;) print(&#39;test2!!&#39;) #print(&#39;test3!!&#39;) . 들여쓰기 . print(&#39;test1!!&#39;) print(&#39;test2!!&#39;) . if a&lt;0: print(test1) . 변수 . test1 = 1 print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . test1 = 1.0 print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . test1 = &#39;hi&#39; print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . test1 = True print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . test1 = [1,2,3,4] print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . test1 = (1,2,3,4) print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . test1 = {&#39;name&#39;:&#39;jane&#39;,&#39;age&#39;: 15} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . test1 = {1,2,3,4} print(test1) print(type(test1)) # 데이터 형 print(id(test1)) # 데이터 주소 . # &#39;(작은따옴표)를 넣고 싶다면 문자열을 &quot;(큰따옴표)로 묶어줍니다 a = &quot;시간은 &#39;금&#39;이다&quot; print(a) # 문자열 안에 &quot;(큰따옴표)를 넣고 싶다면 문자열을 &#39;(작은따옴표)로 묶어줍니다 a = &#39;시간은 &quot;금&quot;이다&#39; print(a) . # &quot;&quot;&quot;(큰따옴표 3개)로 시작하여 &quot;&quot;&quot;로 끝내도 됩니다 a = &#39;&#39;&#39;Hello, world! 안녕하세요. Python입니다.&#39;&#39;&#39; print(a) . a = 1&gt;2 print(a) a = 1&lt;2 print(a) . a,b = 10,20 print(a+b) a,b = &#39;10&#39;,&#39;20&#39; print(a+b) . a,b = &#39;10&#39;,20 print(a+b) . a,b = 10.9,20 print(a+b) . a,b = 10.9,20 print(a+b) . a,b = &#39;10&#39;,20 print(int(a)+b) . a,b = &#39;10&#39;,20 print(int(a)+b) a,b = 10,20 print(str(a)+str(b)) a,b = 10,20 print(float(a)+float(b)) . name = input(&#39;이름을 입력하세요: &#39;) print(name,&#39;님 안녕하세요?&#39;) . #그대로 출력 print(0) #연산 결과 출력 print(1-5,2&gt;5) #변수값 출력 a= &#39;Hello&#39; print(a,a+&#39;world&#39;) #&#39;,&#39;로 구분하여 2개이상 출력(인수 사이에는 공백 추가) . name = input(&#39;이름을 입력하세요: &#39;) print(f&#39;{name}님 안녕하세요?&#39;) . print(&#39;두 수 받아 더 하는 프로그램입니다&#39;) a = input(&#39;첫번째 숫자를 입력하세요 :&#39;) b = input(&#39;두번째 숫자를 입력하세요 :&#39;) print(f&#39;{a} + {b} = {int(a)+int(b)}&#39;) . print(&#39;두 수 받아 더 하는 프로그램입니다&#39;) a = input(&#39;첫번째 숫자를 입력하세요 :&#39;) b = input(&#39;두번째 숫자를 입력하세요 :&#39;) a = int(a) b = int(b) print(f&#39;{a} + {b} = {a+b}&#39;) . a,b = 5,8 print(a+b,a-b,a*b,a/b,a//b,a%b,a**b) . a = input(&#39;화씨온도:&#39;) a = int(a) print(&#39;섭씨온도:&#39;,(a-32)* 5/9) . a= input(&#39;밑변:&#39;) b= input(&#39;높이:&#39;) print(a+b) a = int(a) b = int(b) print(&#39;삼각형의 넓이:&#39;,a*b/2) . a= float(input(&#39;원의 반지름:&#39;)) print(&#39;원의 둘레:&#39;,2*a*3.14,&#39;원의 넓이:&#39;, 3.14 * a**2) . r=input(&#39;반지름:&#39;) r=float(r) print(&quot;원의 둘레:&quot;, 2*3.14*r) print(&quot;원의 넓이:&quot;, 3.14*r**2) . a= 1 print(a) a = b = c = 1 print(a,b,c) a,b,c = 1,2,3 print(a,b,c) . a = 1 a += 11 print(a) a = a + 11 print(a) b = 7 a *= b + a # 아래와 동일 a = a* (b + a ) print(a) . name = input(&#39;이름을 입력하세요:&#39;) a = name + &#39;님 안녕&#39; print(a) . english = 100 result = &#39;영어점수&#39; + english + &#39;점&#39; print(result) . english = 100 result = &#39;영어점수&#39; + str(english) + &#39;점&#39; print(result) . sta=input(&#39;경기장: &#39;) winner=input(&#39;이긴팀: &#39;) loser=input(&#39;진팀: &#39;) vip=input(&#39;vip: &#39;) score=input(&#39;스코어: &#39;) print(f&#39;&#39;&#39;오늘 {sta}에서 경기가 열렸습니다. {winner}와(과) {loser}은(는) 치열한 공방전을 펼쳤습니다. {vip}이(가) 맹활약을 펼쳤습니다. 결국 {winner}이(가) {loser}을(를) {score}로 이겼습니다.&#39;&#39;&#39;) . ＃반지름을　입력받아　원의　둘레와　넓이를　구하는　프로그램 ａ＝ｆｌｏａｔ（ｉｎｐｕｔ（＇원의　반지름：＇）） pｒｉｎｔ（＂원의　둘레：＂，２＊３．１４＊ｒ） ｐｒｉｎｔ（＂원의　넓이：＂，３．１４＊ａ＊＊２） . a = input(&#39;경기장&#39;) b = input(&#39;이긴팀&#39;) c = input(&#39;진팀&#39;) d = input(&#39;vip&#39;) e = input(&#39;스코어&#39;) print(f&#39;&#39;&#39;오늘 {a}에서 경기가 열렸습니다. {b}와(과) {c}는 치열한 공방전을 펼쳤습니다. {b}이(가) 맹활약을 펼쳤습니다. 결국{b}이(가) {c}팀을 {e}로 이겼습니다.&#39;&#39;&#39;) . a = input(&#39;이름을 입력하세요:&#39;) b = float(input(&#39;국어성적을 입력하세요:&#39;)) c = float(input(&#39;영어성적을 입력하세요:&#39;)) d = float(input(&#39;수학성적을 입력하세요:&#39;)) print(&#39;-&#39;*50) print(&#39;평균성적은&#39; ,(b+c+d)/3,&#39;점입니다&#39;) . coff1 = 2000 coff2 = 3000 coff3 = 3500 cof1_num = int(input(&#39;아메리카노 판매 갯수:&#39;)) cof2_num = int(input(&#39;까페라떼 판매 갯수:&#39;)) cof3_num = int(input(&#39;카푸치노 판매 갯수:&#39;)) t_sum = coff1* cof1_num + coff2* cof2_num +coff3* cof3_num print(f&#39;총 매출은 {t_sum}원 입니다&#39;) . &#47928;&#51088;&#50676; &#45236;&#51032; &#53945;&#49688;&#53412; . &#39; =&gt; &#39; &quot; =&gt; &quot; =&gt; n =&gt; 줄바꿈(newline), enter t =&gt; 줄맞춤(intent),tap . print( &#39;셀 병합 n t &#39;shift key &#39;를 누른후 n t t병합을 원하는 셀들을 다중선택 후 shift+M&#39;) . #주민번호,우편번호등 값이 0으로 시작되는 정수 #파이썬에서는 정수가 0으로 시작하면 정수값 입력오류로 문법 오류 처리 print(06002) . print(210101-1111111) print(&#39;210101-1111111&#39;) . &#39;&#39;&#39; join : 문자열을 원하는 글자로 더한다. split : 문자열을 원하는 글자로 나눈다. &#39;&#39;&#39; print(&#39;-&#39;.join(&#39;Hello World&#39;)) print(&#39;Welcome to python&#39;.split(&#39; &#39;)) . a = 8 == 12 print(a,type(a)) b = &#39;apple&#39; == &#39;APPLE&#39; print(b,type(b)) c = 8 != 12 print(c,type(c)) .",
            "url": "https://vrgoldenlab.github.io/DTpython01/2020/05/25/day2-sbapython.html",
            "relUrl": "/2020/05/25/day2-sbapython.html",
            "date": " • May 25, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vrgoldenlab.github.io/DTpython01/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vrgoldenlab.github.io/DTpython01/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vrgoldenlab.github.io/DTpython01/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}