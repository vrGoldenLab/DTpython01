{
  
    
        "post0": {
            "title": "코드연습장",
            "content": ". &#54632;&#49688;&#47196;&#49436;&#51032; print() . 파이썬 내부의 정보를 출력창에 출력하는 역할을 합니다. . 연산은 제대로 되었는지, 입력된 값은 오류가 없는지 원했던 결과가 나왔는지 매순간 확인할 수 있습니다. . 수업을 진행하기 앞서서 print()를 사용하는 방법을 알아 보겠습니다. . 함수 - 여러작업을 하나로 묶어 이름을 붙여 둔 표준화된 프로세스 . . 목적과 기능이 정해져 있습니다 . 작업 수행을 위해 투입 받는 값을 인수(argument)라고 합니다 . 작업을 완수하는 시점에 반환(return) 하는 값이 있을 수 있습니다 . . 함수 호출 방법 함수명(인수) . print? . 1. &#51460;&#48148;&#45000; . print(&#39;놀았던 공은 없어도 공부한 공의 남는다.!!&#39;) print(10) print(20) print(30) . print(10,20,30) #여러개의 인수를 한 줄 출력을 원하면 ,로 인수를 구분 print(&#39;-&#39;*50) . &#47928;&#51109;&#51333;&#44208;&#44050; &#53412;&#50892;&#46300; &#51064;&#49688; end . print(10,20,end=&#39;_&#39;) # 키워드 인수 end는 문장 종결 값을 임의로 바꿔줄때 사용 print(30,end=&#39;_&#39;) . &#44396;&#48516;&#44050; &#53412;&#50892;&#46300; &#51064;&#49688; sep . print(10,20,30,sep=&#39;&lt;&#39;) # 띄어쓰기가 아닌 문자나 기호로 구분을 원하면 키워드 인수 sep 처리 print(&#39;-&#39;*50) . format()&#51012; &#51060;&#50857;&#54620; &#52636;&#47141; . print(&#39;--{0}--{1}--{2}--&#39;.format(1,2,10)) . print(&#39;--{0:3}--{1:3}--{2:3}--&#39;.format(1,2,10)) . text1 = &#39;이것은 {0:&lt;10} 정렬| done {1:&lt;5} |&#39;.format(&#39;left&#39;, &#39;a&#39;) print(text1) # 오른쪽 정렬 text2 = &#39;이것은 {0:&gt;10} 정렬| done {1:&gt;5} |&#39;.format(&#39;right&#39;, &#39;b&#39;) print(text2) # 가운데 정렬 text3 = &#39;이것은 {0:^10} 정렬| done {1:^5} |&#39;.format(&#39;center&#39;, &#39;c&#39;) print(text3) . f-string &#54252;&#47588;&#54021; . 문자열 앞에 f를 붙여주고, 중괄호 안에 직접 변수 이름이나 출력내용을 넣습니다. | 파이썬 버전 3.6 부터 사용 가능 | . a = &#39;운동&#39; b = 4 c = 10 print(f&#39;나는 {a}이 좋아요!! 하루에 {b}회 {c}분씩 반복 합니다&#39;) . f-string 정렬 | . a = &#39;날씨가 좋아요&#39; s_out = f&#39;*** {a:&lt;20} ***&#39; print(s_out) s_out = f&#39;*** {a:^20} ***&#39; print(s_out) s_out = f&#39;*** {a:&gt;20} ***&#39; print(s_out) . f-string 사용 예제 | . mm = 1 yy = 2021 while mm &lt;= 12: print(f&#39; {yy} 년 {mm:&gt;2}월 &#39;) mm += 1 . &#39;&#39;&#39; 2021 년 1월 2021 년 2월 2021 년 3월 2021 년 4월 2021 년 5월 2021 년 6월 2021 년 7월 2021 년 8월 2021 년 9월 2021 년 10월 2021 년 11월 2021 년 12월 &#39;&#39;&#39; mm = 1 yy = 2021 while mm &lt;= 12: print(f&#39; {yy} 년 {mm:&gt;2}월 &#39;,end=&#39; &#39;) if mm % 3 == 0: print(end=&#39; n&#39;) mm += 1 . 1.sep,end &#53412;&#50892;&#46300; &#51064;&#49688;&#47484; &#51060;&#50857;&#54620; &#52636;&#47141; . 년,월,일,시,분,초를 입력 받습니다. | 출력 결과가 다음과 같이 나오도록 출력 양식을 만듭니다. 사용함수 input().split( ) 사용인수 sep,end . | . year, month, day, hour, minute, second = input().split( ) &#39;&#39;&#39; 출력 결과가 다음과 같이 나오도록 코드를 완성합니다 2021/10/1 12:10:1 print(year,month,day,??? ) print(hour,minute,second,???) &#39;&#39;&#39; . 2.format()&#51012; &#51060;&#50857;&#54620; &#44396;&#44396;&#45800; &#52636;&#47141; . &#39;&#39;&#39; 정렬(한줄 30)로 구구단 2단을 출력해 봅니다 아래 반복문을 사용합니다. for i in range(1,10): print(????) ##출력 output 형식 | 2 * 1 = 2 | | 2 * 2 = 4 | | 2 * 3 = 6 | | 2 * 4 = 8 | | 2 * 5 = 10 | | 2 * 6 = 12 | | 2 * 7 = 14 | | 2 * 8 = 16 | | 2 * 9 = 18 | &#39;&#39;&#39; for i in range(1,10): print(&#39;| {0:&gt;15} * {1:^4} = {2:&gt;4} |&#39;.format(2,i,2*i)) . 3.20&#52488;&#47484; &#47582;&#52656;&#46972; . * 시간관련 프로그램 가져오기(import time) * 시작메세지를 보여주고 입력값을 기다립니다. input(&#39;엔터를 누르고 20초를 셉니다&#39;) * 시작시간을 저장합니다. (시스템 시간 : time.time() 사용, 시작시간 변수명에 저장) * 안내메세지를 보여주고 입력값을 기다립니다. input(&#39;20초 후 enter를 치세요&#39;) * 끝시간을 저장합니다. (시스템 시간 : time.time() 사용, 끝시간 변수명에 저장) * 차이시간을 계산합니다.(끝시간-시작시간) * 실제시간을 보여줍니다. * 20초와 차이시간을 출력합니다.(20-실제시간) . import time input(&#39;엔터를 누르고 20초를 셉니다&#39;) s_time = time.time() input(&#39;20초후에 엔터를 누르세요&#39;) e_time = time.time() c_time = int(e_time-s_time) print(&#39;실제시간:&#39;,c_time,&#39;입니다&#39;) print(&#39;차이시간:&#39;,abs(20-c_time),&#39;입니다&#39;) .",
            "url": "https://vrgoldenlab.github.io/DTpython01/2021/05/07/_05_08_python_print_pynb.html",
            "relUrl": "/2021/05/07/_05_08_python_print_pynb.html",
            "date": " • May 7, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "첫째날. 코딩의 기초를 살펴봅니다.",
            "content": ". 코랩에서 코드를 입력하고 실행 버튼을 누르면 계산 결과를 확인할 수 있습니다. 코랩에서 코드추가 버튼 ( 파일 메뉴 아래의 +코드 ) 를 클릭하면 새로운 코드를 입력할 수 있습니다 . 코딩 초보자들이 실제로 코드를 만들어 보려면 프로그래밍 언어를 다 외우는 것은 오히려 뭐가 뭔지 모르게 될 경우가 있습니다. 코드에 필요한 경우에 기본적인 코딩 요소를 연결해서 사용하는 것에 익숙해 지도록 합니다. . 프로그래밍의 기본은 다음과 같습니다. . . 변수 | 배열 | 조건 분기 | 반복 | 함수 | . 1. &#48320;&#49688; . 변수 이름 정하기 . . 변수명의 규칙 . 영문 대소문자,숫자,밑줄(_) 로만 만들수 있습니다 | 변수명은 숫자로 시작할 수 없습니다. | 영문 대소문자를 구분합니다 A와 a는 다른 변수입니다 | 파이썬 내장 함수는 변수명으로 사용할 수 없습니다.( 예: False,True,None,and,as, break, class ....) | 위의 규칙을 지키면서 변수에 저장된 정보가 어떤 것인지 예상할 수 있는 이름이면 좋습니다. . # 결과나 과정,변환된 값을 유지해야 하는 경우 프로그램에서 변수가 필요합니다. print(100+200) print(&quot;Hello World!&quot;) . 300 Hello World! . 변수란 말 그대로 변할 수 있는 수를 말합니다. 코딩에서 특정한 값을 보관힐 수 있는 공간으로 사용됩니다. 계산 결과나 사용자의 입력한 값 혹은 출력해야 하는 값에 사용됩니다. . temp = 100 # temp 라는 변수를 만들고 temp 공간에 100 을 넣는다는 의미 temp # temp 값을 확인하겠다는 의미입니다. 코랩외의 환경에서는 print(temp) . 100 . temp2 = 200 print(temp2) . 200 . temp3 = temp + temp2 # temp3에 temp의 값과 temp2의 값을 더한 새로운 값을 넣는다는 의미 temp3 . 변수를 사용해 문자 더하기 프로그래밍 . . 변수는 숫자나 문자도 넣어 사용 가능합니다. 문자는 문자끼리 숫자는 숫자끼리 연산도 가능합니다. . . str1 = &#39;문자&#39; # str1라는 변수를 만들고 &#39;문자&#39;라는 값을 넣습니다 . str2 = &#39;더하기&#39; . str3 = str1 + str2 print(str3) print(len(str3)) # str3 변수에 담긴 문자열의 길이를 출력 요청 . 문자더하기 5 . 변수의 자료형 . . 파이썬은 어떤 값을 담고 있느냐에 따라 변수의 자료형이 달라집니다. . 문자값을 담고 있으면 문자형 변수, 숫자값을 담고 있을 때는 정수값인지 실수값인지에 따라 정수형 변수, 실수형 변수라고 합니다. . 100은 정수형 데이터, 100.0 은 실수형 데이터, &#39;100&#39;은 문자형 데이터 . . type(str3) . str . type(temp) . int . temp = 100.25 type(temp) . float . 강제로 변수형 바꾸기 . . 문자형 자료를 숫자로 바꾸어 계산을 해야 하는 경우나 정수형 변수를 문자형으로 출력 해야 할 때가 있습니다. 이런 경우 변수를 강제 변환하는 명령어를 사용합니다. . . str4 = &#39;100&#39; type(str4) . str . type(int) . int . 2. &#48176;&#50676; . 여러 값을 넣을 수 있는 배열 . . 변수는 하나의 값만 넣을 수 있지만 배열은 여러개의 값을 넣어 사용할 수 있습니다. 배열의 가장 앞에 있는 원소의 번호는 1이 아니라 0입니다. 첫번째 원소에 접근하지 위해서는 0 인덱스와 대괄호를 사용합니다. 마지막 원소는 인덱스 -1과 대괄호를 사용합니다. . . 기타 배열로는 튜플과 딕션너리가 있습니다. . 튜플은 리스트처럼 요소를 일렬로 저장하지만, 안의 요소를 변경,추가,삭제를 할 수 없습니다. 읽기 전용 리스트라 할 수 있습니다. . 딕셔너리는 연관된 값을 묶어서 저장하는 자료형 입니다. {}중괄호안에 키:값 형식으로 저장합니다. 사전에서 단어 찾듯이 값을 가져올 수 있습니다. . 배열의 길이와 배열 원소의 접근 . . 배열의 데이터가 많을 경우 배열 원소의 길이를 알려주는 함수를 사용합니다. len() . list = [ 1,10,15,2 ] 일때 . list의 1번째 원소는 1 (인덱스 번호는 0) . list의 1번째 원소는 10 (인덱스 번호는 1) . list의 1번째 원소는 15 (인덱스 번호는 2) . list의 1번째 원소는 2 (인덱스 번호는 3 ,혹은 -1) . . list1 = [1,2,3,4,5,6,7,8,9,10] #list1 배열을 만들고 그 안에 여러 값을 넣습니다 print(list1) . [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] . len(list1) # list1 배열 원소값을 요청 #len은 문자열의 길이도 구할 수 있습니다. . 10 . print(list1[0]) #list1배열의 첫번째 원소값을 출력 print(list1[-1]) #list1배열의 마지막 원소값을 출력 print(&#39;list1 배열의 마지막 원소값은 &#39; + str(list1[-1]) + &#39;입니다&#39;) #list1배열의 마지막 원소값을 문자열과 함께 출력 . 1 10 list1 배열의 마지막 원소값은 10입니다 . 슬라이싱 : 배열 원소의 일정 부분만 가져오기 . . 배열의 원소 중 일부분만 가져와서 사용하는 경우나 전체 데이터를 여러부분으로 나누어서 사용할 경우 사용하는 방법입니다. 슬라이싱할 처음 위치와 마지막 위치를 정해주면 그 사이 값을 가져옵니다. . print(list1[2:6]) #list1 배열의 인덱스 2번부터 6번 앞까지의 데이터 출력 요청 print(list1[2:]) #list1 배열의 인덱스 2번부터 마지막까지의 데이터 출력 요청 print(list1[:6]) #list1 배열의 처음부터 인덱스 6번부터 앞까지의 데이터 출력 요청 print(list1[:-1]) #list1 배열의 처음부터 인덱스 마지막 앞까지의 데이터 출력 요청 . [3, 4, 5, 6] [3, 4, 5, 6, 7, 8, 9, 10] [1, 2, 3, 4, 5, 6] [1, 2, 3, 4, 5, 6, 7, 8, 9] . range를 사용해서 리스트 만들기 . . 리스트 = list( range(횟수) ) | 리스트 = list( range(시작,끝) ) | 리스트 = list( range(시작,끝,증가폭) ) | . list_rg1 = list(range(11)) list_rg2 = list(range(5,12)) list_rg3 = list(range(-4,5,2)) list_rg4 = list(range(20,-1,-1)) list_rg5 = list(&#39;hello world&#39;) print(&quot;list_rg1은&quot; , list_rg1) print(&quot;list_rg2은&quot; , list_rg2) print(&quot;list_rg3은&quot; , list_rg3) print(&quot;list_rg4은&quot; , list_rg4) print(&quot;list_rg5은&quot; , list_rg5) . list_rg1은 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] list_rg2은 [5, 6, 7, 8, 9, 10, 11] list_rg3은 [-4, -2, 0, 2, 4] list_rg4은 [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] list_rg5은 [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . list_rg5 = list(&#39;hello world&#39;) list_rg5[0] = &#39;H&#39; print(&quot;list_rg5의 0번째 요소 대문자로 수정&quot; , list_rg5) del list_rg5[5] print(&quot;list_rg5의 5번째 요소 삭제&quot; , list_rg5) . list_rg5의 0번째 요소 대문자로 수정 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] list_rg5의 5번째 요소 삭제 [&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;w&#39;, &#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;] . 3.&#48152;&#48373;&#47928; (for) . 반복하기는 컴퓨터의 특기 중 하나입니다. . 컴퓨터는 아무리 단순한 일도 수백 번, 수 만번씩 반복해도 명령대로 처리하고 그 결과를 보여 줍니다. . 파이썬에서 사용하는 반복문은 for와 while 이 있습니다. . for 반복은 range (범위)를 사용하며 배열의 개념과 관련이 있습니다. . for 변수 in range: . 반복할 내용 . . 파이썬의 인덴트 intent . 파이썬에서는 반복문,조건문,함수 등 코드 블록을 표시하기 위해 중괄호를 사용하지 않고 들여쓰기를 합니다. 들여쓰기의 기본은 4칸이며 tap 키를 사용합니다. . for 문 사용시 흔히 하는 실수는 반복 블럭을 정하는 부분입니다. . for x in range(): 에서 콜론(:) 을 빠뜨리지 않았는지 반복할 내용에서 정확히 들여쓰기가 되었는지 확인합니다. . for x in range(5): # range(5)은 0,1,2,3,4 이므로 변수 x값을 차례대로 0,1,2,3,4로 바꾸면서 반복 블록 실행 print(x) # 반복될 내용 - 변수 x값을 출력 요청합니다 . 0 1 2 3 4 . for x in range(2,4): # range(2,4)은 2부터 4번째 앞까지 이므로 변수 x값을 차례대로 2,3로 바꾸면서 반복 블록 실행 print(x) # 반복될 내용 - 변수 x값을 출력 요청합니다 . 2 3 . list2 = [] for x in range(0,10): print(x) . 0 1 2 3 4 5 6 7 8 9 . &#39;&#39;&#39; 합계를 구하는 변수의 처음 값은 0으로 정합니다 range의 처음 값은 변수 a로 하고 1값을 넣습니다 range의 마지막 값은 변수 b 로 하고 11값을 넣습니다 a부터 b-1까지 x값을 바꾸면서 반복합니다 현재의 test_sum값에 x값을 더합니다 현재의 x값과 test_sum 값을 출력합니다 반복이 완료된 후 &#39;-&#39;을 50번 반복 출력하고 총합 문자열을 출력합니다 &#39;&#39;&#39; test_sum = 0 a = 1 b = 11 for x in range (a,b): test_sum += x print (&quot;x:&quot;, x , &quot;sum:&quot; , test_sum) print(&#39;-&#39; * 50) print( a ,&#39; 부터 &#39;, b-1,&#39; 까지 더한 총합은 &#39; , test_sum , &#39;입니다&#39;) . x: 1 sum: 1 x: 2 sum: 3 x: 3 sum: 6 x: 4 sum: 10 x: 5 sum: 15 x: 6 sum: 21 x: 7 sum: 28 x: 8 sum: 36 x: 9 sum: 45 x: 10 sum: 55 -- 1 부터 10 까지 더한 총합은 55 입니다 . 4. &#51312;&#44148;&#47928; (if,else,elif) . 파이썬 프로그래밍을 할 때 반복문과 함께 자주 사용되는 것이 조건문입니다. . 조건에 해당되는지, 해당되지 않는지에 따라 서로 다른 명령을 수행하도록 합니다. . if문의 구조 . if 조건문: 수행할 문장1 수행할 문장2 ... else: 수행할 문장A 수행할 문장B ... . | . 들여쓰기 if문을 만들 때는 if 조건문: 바로 아래 문장부터 if문에 속하는 모든 문장에 들여쓰기를 해주어야 합니다. 아래와 같이 기술하면 오류처리 됩니다. if 조건문: 수행할 문장1 수행할 문장2 수행할 문장3 . | . bol_chk = True if bol_chk: print(&quot;a&quot;) print(&quot;b&quot;) print(&quot;c&quot;) . 파이썬이 다른 언어보다 보기 쉬운 이유는 콜론(:)을 사용하여 들여쓰기를 사용하기 때문입니다. if 조건문 뒤에는 반드시 콜론(:)이 붙고 while이나 for, def, class문에도 역시 문장의 끝에 콜론(:)이 항상 들어가는 것을 주의 합니다. . 비교연산자 | . 이번에는 조건문에 비교연산자(&lt;, &gt;, ==, !=, &gt;=, &lt;=)를 쓰는 방법에 대해 알아보자. . 다음 표는 비교 연산자를 잘 설명해 준다. . 비교연산자 설명 x &lt; y x가 y보다 작다 x &gt; y x가 y보다 크다 x == y x와 y가 같다 x != y x와 y가 같지 않다 x &gt;= y x가 y보다 크거나 같다 x &lt;= y x가 y보다 작거나 같다 . test_num1 = 11 if test_num1 &gt; 10: #if 뒤에 조건을 작성하고 마지막에 콜론 :을 붙입니다 print( test_num1 ,&#39;은 10보다 큽니다&#39;) #4칸 띄운 후 조건이 참일 때의 명령문을 작성 else: print( test_num1, &#39;은 10보다 작거나 같습니다&#39;) . 11 은 10보다 큽니다 . import random # random 무작위 수를 발생시키는 모듈 for x in range(3): # 3번 반복 test_num1 = random.randint(1,15) # 1에서 15사이의 임의의 수를 test_num1에 넣는다 if test_num1 &gt; 10: #if 뒤에 조건을 작성하고 마지막에 콜론 :을 붙입니다 print( test_num1 ,&#39;은 10보다 큽니다&#39;) #4칸 띄운 후 조건이 참일 때의 면령문을 작성 else: print( test_num1, &#39;은 10보다 작거나 같습니다&#39;) . 7 은 10보다 작거나 같습니다 8 은 10보다 작거나 같습니다 13 은 10보다 큽니다 . import random # random 무작위 수를 발생시키는 모듈 for x in range(10): # 10번 반복 test_num1 = random.randint(1,15) # 1에서 15사이의 임의의 수를 test_num1에 넣는다 if test_num1 &gt; 10: #if 뒤에 조건을 작성하고 마지막에 콜론 :을 붙입니다 print( test_num1 ,&#39;은 10보다 큽니다&#39;) #4칸 띄운 후 조건이 참일 때의 면령문을 작성 elif test_num1 == 10: # elif 여러개의 조건이 있을때 사용하고 마지막에 콜론:을 붙인다 print( test_num1, &#39;은 10과 같습니다&#39;) else : # 앞의 조건식이 모두 맞지 않을때 print( test_num1, &#39;은 10보다 작습니다&#39;) . 14 은 10보다 큽니다 10 은 10과 같습니다 15 은 10보다 큽니다 2 은 10보다 작습니다 6 은 10보다 작습니다 14 은 10보다 큽니다 2 은 10보다 작습니다 2 은 10보다 작습니다 9 은 10보다 작습니다 6 은 10보다 작습니다 . 5. &#48152;&#48373;&#47928; (while) . while 명령어 뒤에 오는 조건이 참일 동안 반복 . . while 반복문은 조건식으로만 동작하고 반복 수행문에 조건에 영향을 주는 변화식이 들어갑니다. . for는 반복할 횟수가 정해졌을때 while은 반복할 횟수가 정해지지 않았을 때 사용합니다. . 중첩반복은 테이블 형태의 데이터를 다룰 때 사용합니다. . x = 0 #변수 x에 초기값 0을 넣습니다 while x &lt; 15: #while 조건식 - 변수x가 15보다 작을 경우 반복 print(&#39;Hello world&#39;, x) #반복처리 코드 x += 1 #조건 변화 처리 - 반복시 x를 1씩 증가합니다 . Hello world 0 Hello world 1 Hello world 2 Hello world 3 Hello world 4 Hello world 5 Hello world 6 Hello world 7 Hello world 8 Hello world 9 Hello world 10 Hello world 11 Hello world 12 Hello world 13 Hello world 14 . break, continue로 반복문 제어 . . break는 for와 while의 반복을 중단합니다. . continue는 반복을 유지한 상태에서 코드 실행만 건너뛰는 역할을 합니다. . x = 0 #초기값 while True: #무한루프 print (x) x += 1 #변수x를 1씩 증가 if x == 10: #변수 x가 10일 때 break #반복문을 끝내고 while 문을 벗어남 . 0 1 2 3 4 5 6 7 8 9 . x = 0 #초기값 while x &lt; 100: #변수 x가 100보다 은 동안 반복 x += 1 if x % 2 == 0: #x 를 17로 나누어서 나머지가 0이면 짝수 continue #아래코드를 실행하지 않고 건너뜀 print (x) if x == 21: #변수 x가 51일 때 break #반복문을 끝내고 while 문을 벗어남 . 1 3 5 7 9 11 13 15 17 19 21 . 6. &#54632;&#49688; . 자주 사용되는 프로그램의 일부분을 분리하여 정의 . . 함수가 어떤 기능을 할 건지 파이썬에게 알려주는 것을 &#39;함수를 정의한다&#39;라고 합니다 . 만들어진 함수를 실제로 사용하는 것을 &#39;함수를 호출한다&#39;라고 합니다. . def hello(): #hello 함수 정의 print(&#39;Hello Python!&#39;) hello() #hello 함수 호출 hello() . Hello Python! Hello Python! . def hello(name): print(&#39;Hello &#39; ,name ) list_name = [&#39;철수&#39;,&#39;영희&#39;,&#39;순희&#39;,&#39;영수&#39;] for x in list_name: hello(x) . Hello 철수 Hello 영희 Hello 순희 Hello 영수 . def sum_func(n): d_sum = 0 #합을 구하기 위한 변수 초기화 for x in range(1,n+1): #range를 1부터 n+1까지로 정해 1부터 n까지 x값을 변화하면 반복 d_sum += x #현재 합에 x를 다시 더한다 return d_sum #계산된 d_sum 값을 결과값으로 돌려줍니다 print(sum_func(10)) print(sum_func(1000)) . 55 500500 . &#50724;&#45720;&#51032; &#53076;&#46377; . a = &#39;3+9&#39; eval(a) # eval 함수 괄호 안에 문자열로 된 수식을 넣으면 eval 함수는 문자열을 수식으로 계산해서 결과값으로 돌려줍니다. . 12 . &#39;&#39;&#39; 파이썬의 random 모듈을 이용하여 간단한 더하기,빼기,곱하기 문제를 무작위로 만들어 봅니다 사용자가 문제를 보고 답을 입력하면 컵퓨터가 정답,오답을 구분하여 점수를 계산합니다. 문제는 다섯번 반복합니다. &#39;&#39;&#39; import random def make_quiz(): a = random.randint(1,50) # 1~50까지 임의의 수 b = random.randint(1,50) # 1~50까지 임의의 수 k = random.randint(1,4) # 1~4까지 임의의 수 (연산자 임의 선택 ) # 연산자 처리 1 은 더하기 ,2는 빼기,3은 곱하기 if k == 1: op = &#39;+&#39; elif k== 2: op = &#39;-&#39; else: op = &#39;*&#39; q_text = str(a) + op + str(b) # a,b값을 문자로 변환하여 문제를 만들어 반환값 q_text에 넣습니다 return q_text # 함수값을 return합니다 #정답/오답 저장 변수 초기화 cor_num = 0 incor_num = 0 for x in range (5): # 다섯번 반복 q_text = make_quiz() # 문제만드는 함수 호출 print(q_text) #연산식 출력 ans = input(&#39;=&#39;) #사용자에게 정답을 입력받습니다 in_ans = int(ans) #입력값은 문자형식이라 정수형으로 강제변환합니다 # 문제의 값과 사용자 입력값을 비교해 정답/오답 횟수를 계산합니다 if eval(q_text) == in_ans: print(ans , &#39; 정답입니다&#39;) cor_num +=1 else: print(ans , &#39; 오답입니다&#39;) incor_num +=1 print(&#39;정답 :&#39;,cor_num ,&#39;오답 : &#39;, incor_num ) . 20-43 20-43 =-23 -23 정답입니다 34+12 34+12 =46 46 정답입니다 50-45 50-45 =5 5 정답입니다 34+25 34+25 =59 59 정답입니다 36+35 36+35 =71 71 정답입니다 정답 : 5 오답 : 0 .",
            "url": "https://vrgoldenlab.github.io/DTpython01/2021/05/07/_05_08_python_day1.html",
            "relUrl": "/2021/05/07/_05_08_python_day1.html",
            "date": " • May 7, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "import 모듈 가져 오기",
            "content": ". from math import ceil a = ceil(-3.14) #결과는 -3 b = ceil(3.14) #결과는 4 # import math #math 모듈을 먼저 import해야 한다. #math.ceil(-3.14) #결과는 -3 #math.ceil(3.14) #결과는 4 print(a,b) . &#47784;&#46280; &#51060;&#46976; . 모듈이란 함수나 변수 또는 클래스를 모아 놓은 파일입니다. 모듈은 다른 파이썬 프로그램에서 불러와 사용할 수 있습니다. 파이썬 스크립트를 작성할 때마다 매번 비슷한 클래스와 함수를 작성한다면 코드도 길어지고 중복되는 부분이 생깁니다. 이런 경우에는 공통되는 부분을 빼내서 모듈과 패키지로 만들면 됩니다. 이후에는 코드를 다시 만들지 않고 모듈과 패키지만 가져와서 사용하면 편리합니다. . 모듈(module)은 변수, 함수, 클래스 등을 모아 놓은 스크립트 파일이고, 패키지(package)는 여러 모듈을 묶은 것입니다. 모듈은 간단한 기능을 담을 때 사용하며, 패키지는 코드가 많고 복잡할 때 사용합니다. 즉, 패키지는 기능들이 모듈 여러 개로 잘게 나누어져 있고, 관련된 모듈끼리 폴더에 모여 있는 형태입니다. . 캘린더 기능 month(): 함수에 인수로 년,월을 입력하여 호출하면 캘린더 데이터(문자열)반환 isleap(): 함수에 인수로 년도를 입력하면 bol을 반환 | import calendar # calendar 모듈 import print(calendar.month(2021,5)) # 달력 년월을 지정 출력 . import calendar # calendar 모듈 import print(calendar.isleap(2021)) # 윤년 여부 출력 . 날짜와 시간 어떤 언어를 사용하든지 프로그래밍을 하면서 날짜와 시간 처리는 피하기 어려운 부분입니다. 파이썬은 내장 모듈인 datetime을 통해서 어떻게 날짜와 시간 데이터를 처리를 지원하고 있습니다. | today(): 프로그램을 실행한 시점의 날찌와 시간을 반환 | now(): 실행 시점의 날짜와 시간을 반환. 초값에는 소수점 이하값 포함 | timezone(): datetime 내장 모듈의 timezone 클래스는 시간대를 표현하기 위해서 사용 timezone 클래스의 생성자는 UTC 기준으로 시차를 표현하는 timedelta 객체를 인자로 받아 timezone 객체를 생성해줍니다 한국은 UTC 기준으로 9시간이 빠르므로 다음과 같이 timezone 객체를 생성할 수 있습니다. 참고 자료 https://docs.python.org/3/library/datetime.html | . from datetime import timedelta, timezone # timezone 클래스의 생성자는 UTC 기준으로 시차를 표현 tzinfo=timezone(timedelta(hours=9)) print(datetime.date.today(tzinfo))) print(datetime.datetime.now(tzinfo)) now_str = datetime.datetime.now(tzinfo) print(now_str.hour) print(now_str.minute) print(now_str.second) . 경과한 날짜 수 확인 임의의 날짜에서 다른 임의의 날짜까지의 경과일 계산 | . import datetime date1 = datetime.date.today() date2 = datetime.date(2000,1,1) print(date1-date2) . random 모듈 파이썬의 random 모듈은 랜덤 숫자를 생성 뿐만 아니라 다양한 랜덤 관련 함수를 제공합니다. | 모듈 임포트 우선 random 모듈을 사용하려면 임포트해야 합니다. . import random . | random() 함수 0부터 1사이의 랜덤 실수를 리턴합니다. . random.random() # Random float x, 0.0 &lt;= x &lt; 1.0 . | . uniform() 함수 2개의 숫자 사이의 랜덤 실수를 리턴합니다. . random.uniform(1, 10) # Random float x, 1.0 &lt;= x &lt; 10.0 . | . randint() 함수 2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) . random.randint(1, 10) # Integer from 1 to 10, endpoints included . | randrange() 함수 range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 리턴합니다. random.randrange(0, 101, 2) # Even integer from 0 to 100 | choice() 함수 랜덤하게 하나의 원소를 선택합니다. . random.choice(&#39;abcdefghij&#39;) # Choose a random element random.choice(&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;) . | . import random a = random.random() # Random float x, 0.0 &lt;= x &lt; 1.0 #2개의 숫자 사이의 랜덤 실수를 리턴합니다. b = random.uniform(1, 10) # Random float x, 1.0 &lt;= x &lt; 10.0 #2개의 숫자 사이의 랜덤 정수를 리턴합니다. (2번째 인자로 넘어온 정수도 범위에 포함시킴) c =random.randint(1, 10) # Integer from 1 to 10, endpoints included #range(start, stop, step) 함수로 만들어지는 정수 중에 하나를 랜덤하게 리턴합니다. d=random.randrange(0, 101, 2) # Even integer from 0 to 100 #choice() 함수 랜덤하게 하나의 원소를 선택합니다. e = random.choice(&#39;abcdefghij&#39;) # Choose a random element f = random.choice([&#39;가위&#39;,&#39;바위&#39;,&#39;보&#39;]) print(a,b,c,d,e,f) .",
            "url": "https://vrgoldenlab.github.io/DTpython01/2021/05/07/_05_08_import.html",
            "relUrl": "/2021/05/07/_05_08_import.html",
            "date": " • May 7, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vrgoldenlab.github.io/DTpython01/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vrgoldenlab.github.io/DTpython01/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vrgoldenlab.github.io/DTpython01/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vrgoldenlab.github.io/DTpython01/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}